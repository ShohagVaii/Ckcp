import random
import logging
from telegram import Update, ChatPermissions, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CallbackQueryHandler, CommandHandler

# рж▓ржЧрж┐ржВ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐рж░ рждрж╛рж▓рж┐ржХрж╛
ADMIN_IDS = [6061043680]

# ржХрзНржпрж╛ржкржЪрж╛ ржкрзНрж░рж╢рзНржирзЗрж░ ржзрж░ржи
captcha_questions = [
    {"type": "text", "question": "рзл + рзй ржХржд?", "answer": "рзо", "options": ["рзм", "рзн", "рзо", "рзп"]},
    {"type": "text", "question": "ржмрж╛ржВрж▓рж╛рж░ рж░рж╛ржЬржзрж╛ржирзА ржХрзА?", "answer": "ржврж╛ржХрж╛", "options": ["ржврж╛ржХрж╛", "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо", "ржЦрзБрж▓ржирж╛", "рж░рж╛ржЬрж╢рж╛рж╣рзА"]},
    {"type": "image", "question": "ржПржЗ ржЫржмрж┐рждрзЗ ржХрзЛржи ржкрзНрж░рж╛ржгрзА ржЖржЫрзЗ?", "answer": "ржмрж╛ржШ", "media": "media/im.jpg", "options": ["рж╣рж╛рждрж┐", "ржЧрж░рзБ", "ржмрж╛ржШ", "ржкрж╛ржирзНржбрж╛"]},
    {"type": "audio", "question": "ржПржЗ ржЕржбрж┐ржУрждрзЗ ржХрзЛржи рж╕рзБрж░ рж╢рзЛржирж╛ ржпрж╛ржЪрзНржЫрзЗ?", "answer": "рж╕рзБрж░ рзз", "media": "media/au.mp3", "options": ["рж╕рзБрж░ рзз", "рж╕рзБрж░ рзи", "рж╕рзБрж░ рзй", "рж╕рзБрж░ рзк"]}
]

# ржХрзНржпрж╛ржкржЪрж╛ ржЪрзЗрж╖рзНржЯрж╛рж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи
captcha_stats = {
    "total_attempts": 0,
    "successful_captchas": 0,
    "failed_captchas": 0
}

# ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐
NOTIFY_CHANNEL_ID = "@captchboss"  # ржЪрзНржпрж╛ржирзЗрж▓ ржкрзНрж░рж╛ржЗржнрзЗржЯ рж╣рж▓рзЗ рж╕ржарж┐ржХ ржЖржЗржбрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи

# ржирждрзБржи рж╕ржжрж╕рзНржпржжрзЗрж░ рж╕рзНржмрж╛ржЧрждржо ржЬрж╛ржирж╛ржирзЛ ржУ ржХрзНржпрж╛ржкржЪрж╛ ржкрж╛ржарж╛ржирзЛ
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        question_data = random.choice(captcha_questions)
        captcha_stats["total_attempts"] += 1

        welcome_message = f"ЁЯе░ рж╕рзНржмрж╛ржЧрждржо  {member.first_name}!\nржЧрзНрж░рзБржкрзЗрж░ ржирж┐ржпрж╝ржо ржорзЗржирзЗ ржЪрж▓рзБржи ржПржмржВ ржХрзНржпрж╛ржкржЪрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзБржиред"
        await context.bot.restrict_chat_member(
            chat_id=update.effective_chat.id,
            user_id=member.id,
            permissions=ChatPermissions(can_send_messages=False)
        )

        # ржЗржирж▓рж╛ржЗржи ржмрзЛрждрж╛ржо ржЕржкрж╢ржи рж╕рзЗржЯржЖржк
        keyboard = [
            [InlineKeyboardButton(option, callback_data=f"{member.id}:{option}") for option in question_data["options"]]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            # ржкрзНрж░рж╢рзНржирзЗрж░ ржзрж░ржи ржЕржирзБржпрж╛ржпрж╝рзА ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
            if question_data["type"] == "image":
                with open(question_data["media"], 'rb') as photo:
                    sent_message = await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=photo,
                        caption=f"{welcome_message}\n\nржХрзНржпрж╛ржкржЪрж╛ ржкрзНрж░рж╢рзНржи: \n{question_data['question']}",
                        reply_markup=reply_markup
                    )
            elif question_data["type"] == "audio":
                with open(question_data["media"], 'rb') as audio:
                    sent_message = await context.bot.send_audio(
                        chat_id=update.effective_chat.id,
                        audio=audio,
                        caption=f"{welcome_message}\n\nржХрзНржпрж╛ржкржЪрж╛ ржкрзНрж░рж╢рзНржи: \n{question_data['question']}",
                        reply_markup=reply_markup
                    )
            else:
                sent_message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"{welcome_message}\n\nржХрзНржпрж╛ржкржЪрж╛ ржкрзНрж░рж╢рзНржи: \n{question_data['question']}",
                    reply_markup=reply_markup
                )

            # рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржУ ржмрж╛рж░рзНрждрж╛ ржЖржЗржбрж┐ рж╕ржВрж░ржХрзНрж╖ржг
            context.user_data[member.id] = {
                "correct_answer": question_data["answer"].lower(),
                "attempts": 0,
                "message_id": sent_message.message_id
            }

        except Exception as e:
            logger.error(f"ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛рждрзЗ рждрзНрж░рзБржЯрж┐: {e}")

# ржХрзНржпрж╛ржкржЪрж╛ ржЙрждрзНрждрж░ ржпрж╛ржЪрж╛ржЗ
async def captcha_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id, answer = query.data.split(":")
    user_id = int(user_id)

    if query.from_user.id != user_id:
        await query.answer("ржПржЗ ржХрзНржпрж╛ржкржЪрж╛ржЯрж┐ ржЖржкржирж╛рж░ ржЬржирзНржп ржиржпрж╝!тЭМ", show_alert=True)
        return

    user_data = context.user_data.get(user_id, {})
    correct_answer = user_data.get("correct_answer", "").lower()
    attempts = user_data.get("attempts", 0)

    if answer.lower() == correct_answer:
        captcha_stats["successful_captchas"] += 1

        await context.bot.restrict_chat_member(
            chat_id=query.message.chat.id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=True)
        )

        await query.answer("ржзржирзНржпржмрж╛ржж! ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржХрзНржпрж╛ржкржЪрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗржЫрзЗржи! тЬЕ")

        # рж╕ржлрж▓ рж╕ржорж╛ржзрж╛ржиржХрж╛рж░рзАрж░ рждржерзНржп ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрж╛ржарж╛ржирзЛ
        username = query.from_user.username or "N/A"
        user_message = (
            f"*рж╕ржлрж▓ ржХрзНржпрж╛ржкржЪрж╛ рж╕ржорж╛ржзрж╛ржиржХрж╛рж░рзА:*\n\n"
            f"*ржЗржЙржЬрж╛рж░ржирзЗржо:* @{username}\n"
            f"*ржЪрзНржпрж╛ржЯ ржЖржЗржбрж┐:* `{query.message.chat.id}`\n"
            f"*ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐:* `{user_id}`"
        ).replace("_", "\\_").replace("*", "\\*")  # Escaping special characters

        try:
            await context.bot.send_message(
                chat_id=NOTIFY_CHANNEL_ID,
                text=user_message,
                parse_mode="MarkdownV2"
            )
        except Exception as e:
            logger.error(f"ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛рждрзЗ рждрзНрж░рзБржЯрж┐: {e}")

        # ржХрзНржпрж╛ржкржЪрж╛ ржмрж╛рж░рзНрждрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
        try:
            await context.bot.delete_message(chat_id=query.message.chat.id, message_id=user_data["message_id"])
        except Exception as e:
            logger.error(f"ржХрзНржпрж╛ржкржЪрж╛ ржмрж╛рж░рзНрждрж╛ ржорзБржЫрждрзЗ рждрзНрж░рзБржЯрж┐: {e}")

        del context.user_data[user_id]
    else:
        attempts += 1
        user_data["attempts"] = attempts

        if attempts >= 5:
            captcha_stats["failed_captchas"] += 1
            await query.message.reply_text("ржЖржкржирж┐ ржмрж╛рж░ржмрж╛рж░ ржнрзБрж▓ ржЙрждрзНрждрж░ ржжрж┐ржпрж╝рзЗржЫрзЗржиред ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржкрзНрж░ржмрзЗрж╢рж╛ржзрж┐ржХрж╛рж░ ржмржирзНржз ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
            await context.bot.ban_chat_member(chat_id=query.message.chat.id, user_id=user_id)

            if "message_id" in user_data:
                try:
                    await context.bot.delete_message(chat_id=query.message.chat.id, message_id=user_data["message_id"])
                except Exception as e:
                    logger.error(f"ржмрж╛рж░рзНрждрж╛ ржорзБржЫрждрзЗ рждрзНрж░рзБржЯрж┐: {e}")

            del context.user_data[user_id]
        else:
            await query.answer("ржЖржкржирж╛рж░ ржЙрждрзНрждрж░ рж╕ржарж┐ржХ ржиржпрж╝, ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!", show_alert=True)

# ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржп ржХрзНржпрж╛ржкржЪрж╛ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржжрзЗржЦрж╛ржирзЛ
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in ADMIN_IDS:
        await update.message.reply_text(
            f"**ржХрзНржпрж╛ржкржЪрж╛ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи**:\n\n"
            f"*ржорзЛржЯ ржЪрзЗрж╖рзНржЯрж╛:* {captcha_stats['total_attempts']}\n"
            f"*рж╕ржлрж▓ ржХрзНржпрж╛ржкржЪрж╛:* {captcha_stats['successful_captchas']}\n"
            f"*ржмрзНржпрж░рзНрже ржХрзНржпрж╛ржкржЪрж╛:* {captcha_stats['failed_captchas']}",
            parse_mode="MarkdownV2"
        )
        logger.info(f"ржЕрзНржпрж╛ржбржорж┐ржи {update.effective_user.id} ржХрзНржпрж╛ржкржЪрж╛ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржжрзЗржЦрждрзЗ ржЪрзЗржпрж╝рзЗржЫрзЗржиред")
    else:
        await update.message.reply_text("ржжрзБржГржЦрж┐ржд, ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ ржХрзЗржмрж▓ ржПржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")

# ржирждрзБржи ржХрзНржпрж╛ржкржЪрж╛ ржкрзНрж░рж╢рзНржи ржпрзБржХрзНржд ржХрж░рж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб
async def add_captcha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in ADMIN_IDS:
        if len(context.args) < 3:
            await update.message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи, рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржПржмржВ ржЕржкрж╢ржирж╕ржорзВрж╣ ржжрж┐ржпрж╝рзЗ ржХрзНржпрж╛ржкржЪрж╛ ржпрзБржХрзНржд ржХрж░рзБржиред")
            return

        new_question = " ".join(context.args[:-1])
        answer = context.args[-1]
        options = context.args[2:-1]

        captcha_questions.append({
            "type": "text",
            "question": new_question,
            "answer": answer,
            "options": options
        })

        await update.message.reply_text(f"ржирждрзБржи ржХрзНржпрж╛ржкржЪрж╛ ржкрзНрж░рж╢рзНржи ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ: {new_question}")
        logger.info(f"ржирждрзБржи ржХрзНржпрж╛ржкржЪрж╛ ржкрзНрж░рж╢рзНржи ржпрзБржХрзНржд ржХрж░рзЗржЫрзЗржи ржЕрзНржпрж╛ржбржорж┐ржи {update.effective_user.id}: {new_question}")
    else:
        await update.message.reply_text("ржжрзБржГржЦрж┐ржд, ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ ржХрзЗржмрж▓ ржПржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")


# ржХрзЛржирзЛ рж╕ржжрж╕рзНржп ржЧрзНрж░рзБржк рждрзНржпрж╛ржЧ ржХрж░рж▓рзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ
async def left_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    left_member = update.message.left_chat_member
    if left_member:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{left_member.full_name} ржЖржмрж╛рж▓ ржЧрзНрж░рзБржк ржерзЗржХрзЗ ржЪрж▓рзЗ ржЧрзЗржЫрзЗред"
        )
        logger.info(f"рж╕ржжрж╕рзНржп ржЪрж▓рзЗ ржЧрзЗржЫрзЗ: {left_member.full_name}")

# ржорзВрж▓ ржлрж╛ржВрж╢ржи ржпрж╛ ржмржЯ ржЪрж╛рж▓рж╛ржпрж╝
def main():
    application = Application.builder().token("7827787271:AAGeLcQfjriN6W-BJrfNWfW-GbNYKvLGZdo").build()  # ржЖржкржирж╛рж░ ржЯрзЛржХрзЗржи ржПржЦрж╛ржирзЗ ржмрж╕рж╛ржи

    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзБржХрзНржд ржХрж░рж╛
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    application.add_handler(CallbackQueryHandler(captcha_button))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("add_captcha", add_captcha))
    application.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, left_member))

    # ржмржЯ ржЪрж╛рж▓рж╛ржирзЛ
    application.run_polling()

if __name__ == '__main__':
    main()
